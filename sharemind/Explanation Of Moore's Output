
the procedure works as follows. In the example that you provided my
there are two input DFAs both working on an alphabet of two letters: 0 and 1.

The first DFA (what is printed after first **** Automata ****)
has four states (0,1,2,3), starts in state 0, and has one accepting state: 2.
It accepts the strings 00 and 10.
Notice that the automaton is complete, from every state there is a transition
for every alphabet's letter. For this reason, state 3 plays the role of a sink
state.


The second DFA has 8 states (0,1,2,3,4,5,6,7), I think should start from
state 0 (there is probably an error with the input automaton, since your
output says that this DFA has no starting state. All DFA must have one
starting state), has two accepting states: 0 and 2.
It accepts the strings "", 00, and 110.

The product of these two DFAs produces 32 states.
Every state of the product should be (i,j) with i in [0,3] and j in [0,7].
Hereafter we use k = i*4+j.

The Moore algorithm work via partition refinement. The classes that
you see later are iterative refinement of the partitions.
Foe example initially
classes {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
states that all states are in the same partition 0 with except of the
states (2,0) and (2,2) since these are accepting states.

At the end of the partition refinement you get
classes {1, 3, 3, 3, 3, 3, 1, 1, 3, 4, 3, 4, 4, 3, 1, 1, 5, 3, 5, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1}
This means that the minimized product DFA has 5 states (at most).
All states k having class 1 have been minimized in the same state.
Similarly, all states k having class 2 have been minimized in the same state.
To check if the minimized state C1 has a transition to C2 via the symbol l,
you should check if there is a state (i,j) in the product
having class C1 that has a transition to a state (i',j') having class C2
via the symbol l.

Best regards

Roberto Guancialeâ€‹